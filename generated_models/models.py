# generated by datamodel-codegen:
#   filename:  generated_openapi.yaml
#   timestamp: 2025-06-21T22:49:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, RootModel


class PostDocument(BaseModel):
    pass


class MediaType(Enum):
    image = 'image'
    video = 'video'


class Metadata(BaseModel):
    created_date: datetime = Field(..., description='Creation timestamp')
    updated_date: datetime = Field(..., description='Last update timestamp')
    is_active: bool = Field(..., description='Whether the record is active or soft-deleted')


class CognitiveTag(BaseModel):
    name: str
    confidence: float


class CognitiveCategory(BaseModel):
    name: str
    confidence: float


class Rectangle(BaseModel):
    x: float
    y: float
    w: float
    h: float


class CognitiveCaption(BaseModel):
    text: str
    confidence: float


class CognitiveDenseCaption(BaseModel):
    text: str
    confidence: float
    bounding_box: Rectangle = Field(..., alias='boundingBox')


class CognitiveBrand(BaseModel):
    name: str
    confidence: float


class CognitivePerson(BaseModel):
    confidence: float
    rectangle: Rectangle


class ContentType(Enum):
    text = 'text'
    video = 'video'
    multi_image = 'multi_image'
    image = 'image'


class Platform(Enum):
    instagram = 'instagram'
    facebook = 'facebook'
    twitter = 'twitter'
    tiktok = 'tiktok'


class DaysOfWeekEnum(Enum):
    monday = 'monday'
    tuesday = 'tuesday'
    wednesday = 'wednesday'
    thursday = 'thursday'
    friday = 'friday'
    saturday = 'saturday'
    sunday = 'sunday'


class TimeSlot(BaseModel):
    hour: int = Field(..., description='Hour in 24-hour format', ge=0, le=23)
    minute: int = Field(..., description='Minute', ge=0, le=59)
    timezone: str = Field(..., description="Timezone string (e.g., 'America/New_York')")


class PromptVariable(BaseModel):
    name: Optional[str] = None
    values: Optional[list[str]] = None
    description: Optional[str] = None


class Weight(Enum):
    normal = 'normal'
    bold = 'bold'


class Style(Enum):
    normal = 'normal'
    italic = 'italic'


class Font(BaseModel):
    family: str = Field(..., description='Font family for the overlay text (e.g., Arial).')
    size: str = Field(..., description='Font size (e.g., "32px").')
    weight: Optional[Weight] = Field(None, description='Font weight for the overlay text.')
    style: Optional[Style] = Field(None, description='Font style for the overlay text.')


class Color(BaseModel):
    text: str = Field(..., description='Color for the overlay text (e.g., "#000000").')
    background: str = Field(
        ..., description='Background color for the overlay area (e.g., "#FFFFFF").'
    )
    box: Optional[str] = Field(
        None, description='Color of the text box background (e.g., "#000000").'
    )
    outline: Optional[str] = Field(None, description='Color for text outline (if supported).')


class Outline(BaseModel):
    color: Optional[str] = Field(None, description='Color for text outline (if supported).')
    width: Optional[int] = None


class VisualStyle(BaseModel):
    font: Optional[Font] = None
    color: Optional[Color] = None
    outline: Optional[Outline] = None


class Text(BaseModel):
    value: Optional[str] = None


class MediaTypeModel(Enum):
    color = 'Color'
    set = 'Set'
    uploaded = 'Uploaded'
    online = 'Online'


class Video(BaseModel):
    media_type: Optional[MediaTypeModel] = None
    set_url: Optional[str] = None
    visual_style: Optional[VisualStyle] = Field(None, alias='visualStyle')


class BrandInfo(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None


class SocialAccount(BaseModel):
    id: str = Field(..., description='Unique identifier for the social account')
    username: str = Field(..., description='Username for the social account')
    access_token: str = Field(..., alias='accessToken', description='OAuth access token')
    profile_url: str = Field(..., alias='profileUrl', description="URL to the user's profile")
    expiry_date: datetime = Field(..., description='Token expiration timestamp')


class TemplateInfo(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    content_type: Optional[ContentType] = Field(None, alias='contentType')
    social_accounts: Optional[list[Platform]] = Field(None, alias='socialAccounts')


class PromptTemplate(BaseModel):
    system_prompt: Optional[str] = None
    user_prompt: Optional[str] = None
    temperature: Optional[float] = None
    max_tokens: Optional[int] = None
    model: Optional[str] = None
    variables: Optional[list[PromptVariable]] = None


class VisualStyleObj(BaseModel):
    themes: Optional[list[VisualStyle]] = None


class Font1(BaseModel):
    family: str = Field(..., description='Font family for the overlay text (e.g., Arial).')
    size: str = Field(..., description='Font size (e.g., "32px").')
    weight: Optional[Weight] = Field(None, description='Font weight for the overlay text.')
    style: Optional[Style] = Field(None, description='Font style for the overlay text.')


class VisualStyle1(BaseModel):
    font: Optional[Font1] = None
    color: Optional[Color] = None
    outline: Optional[Outline] = None


class FontModel(BaseModel):
    family: Optional[str] = None
    size: Optional[str] = None
    weight: Optional[str] = None
    style: Optional[str] = None


class OutlineModel(BaseModel):
    color: Optional[str] = None
    width: Optional[int] = None


class Alignment(BaseModel):
    text_align: Optional[str] = None


class OverlayBox(BaseModel):
    color: Optional[str] = None
    transparency: Optional[float] = None
    vertical_location: Optional[str] = None
    horizontal_location: Optional[str] = None


class Styles(BaseModel):
    regular: Optional[str] = None
    bold: Optional[str] = None
    italic: Optional[str] = None
    bold_italic: Optional[str] = None


class Font2(BaseModel):
    family: Optional[str] = None
    display_name: Optional[str] = None
    styles: Optional[Styles] = None


class Fonts(RootModel[list[Font2]]):
    root: list[Font2] = Field(
        ..., description='Font definitions for use by both backend and frontend'
    )


class Font3(BaseModel):
    family: Optional[str] = None
    size: Optional[str] = None
    weight: Optional[str] = None
    style: Optional[str] = None


class SocialAccountEntry(BaseModel):
    platform: Optional[Platform] = None
    account: Optional[SocialAccount] = None


class Schedule1(BaseModel):
    days_of_week: list[DaysOfWeekEnum]
    time_slots: list[TimeSlot]


class Image(BaseModel):
    media_type: Optional[MediaTypeModel] = None
    set_url: Optional[str] = None
    visual_style: Optional[VisualStyle] = Field(None, alias='visualStyle')


class CognitiveObject(BaseModel):
    object: str
    confidence: float
    rectangle: Rectangle


class Error(BaseModel):
    code: str = Field(..., description='Error code identifier')
    message: str = Field(..., description='Human-readable error message')
    details: Optional[str] = Field(None, description='Optional additional error details')


class BaseModel1(BaseModel):
    id: str = Field(..., description='unique identifier for the record')
    metadata: Metadata


class ContentGenerationTemplateResponse(BaseModel):
    id: Optional[str] = None
    brand_id: Optional[str] = Field(None, alias='brandId')


class ContentGenerationTemplateDelete(BaseModel):
    id: str


class BrandResponse(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None


class BrandDelete(BaseModel):
    id: str


class BrandCreate(BaseModel):
    brand_info: BrandInfo = Field(..., alias='brandInfo')


class Schedule(BaseModel):
    days_of_week: list[DaysOfWeekEnum]
    time_slots: list[TimeSlot]


class MultiImage(BaseModel):
    images: Optional[list[Image]] = None
    min_images: Optional[int] = None
    max_images: Optional[int] = None


class TextStyle(BaseModel):
    font: Optional[FontModel] = None
    font_color: Optional[str] = None
    outline: Optional[OutlineModel] = None
    alignment: Optional[Alignment] = None


class CognitiveData(BaseModel):
    tags: Optional[list[CognitiveTag]] = None
    categories: Optional[list[CognitiveCategory]] = None
    objects: Optional[list[CognitiveObject]] = None
    caption: Optional[CognitiveCaption] = None
    dense_captions: Optional[list[CognitiveDenseCaption]] = Field(None, alias='denseCaptions')
    brands: Optional[list[CognitiveBrand]] = None
    people: Optional[list[CognitivePerson]] = None
    ocr_text: Optional[str] = Field(None, alias='ocrText')


class ContentItem(BaseModel):
    text: Optional[Text] = None
    image: Optional[Image] = None
    video: Optional[Video] = None
    multi_image: Optional[MultiImage] = Field(None, alias='multiImage')


class BrandUpdate(BaseModel):
    brand_info: Optional[BrandInfo] = Field(None, alias='brandInfo')
    social_accounts: Optional[list[SocialAccountEntry]] = Field(None, alias='socialAccounts')


class BrandDocument(BaseModel1):
    user_id: Optional[str] = None
    brand_info: Optional[BrandInfo] = None
    social_accounts: Optional[list[SocialAccountEntry]] = Field(None, alias='socialAccounts')


class TemplateSettings(BaseModel):
    prompt_template: Optional[PromptTemplate] = None
    visual_style: Optional[VisualStyleObj] = None
    content_item: Optional[ContentItem] = Field(None, alias='contentItem')


class MediaMetadata(BaseModel):
    file_name: str = Field(..., alias='fileName')
    description: Optional[str] = None
    tags: list[str]
    suggested_name: Optional[str] = Field(None, alias='suggestedName')
    cognitive_data: CognitiveData = Field(..., alias='cognitiveData')


BrandGet = BrandDocument


class ContentGenerationTemplateUpdate(BaseModel):
    brand_id: Optional[str] = Field(None, alias='brandId')
    template_info: Optional[TemplateInfo] = Field(None, alias='templateInfo')
    schedule: Optional[Schedule] = None
    settings: Optional[TemplateSettings] = None
    deleted: Optional[bool] = None


class ContentGenerationTemplateDocument(BaseModel1):
    brand_id: Optional[str] = Field(None, alias='brandId')
    template_info: Optional[TemplateInfo] = Field(None, alias='templateInfo')
    schedule: Optional[Schedule] = None
    settings: Optional[TemplateSettings] = None


class ContentGenerationTemplateCreate(BaseModel):
    brand_id: str = Field(..., alias='brandId')
    template_info: TemplateInfo = Field(..., alias='templateInfo')
    schedule: Optional[Schedule] = None
    settings: Optional[TemplateSettings] = None


class MediaDocument(BaseModel1):
    brand_id: Optional[str] = Field(None, alias='brandId')
    blob_url: Optional[str] = Field(None, alias='blobUrl')
    media_type: Optional[MediaType] = Field(None, alias='mediaType')
    media_metadata: Optional[MediaMetadata] = Field(None, alias='mediaMetadata')


ContentGenerationTemplateGet = ContentGenerationTemplateDocument
