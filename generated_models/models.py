# generated by datamodel-codegen:
#   filename:  bundled_openapi.yaml
#   timestamp: 2025-06-14T18:08:13+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Optional
from uuid import UUID

from pydantic import BaseModel, Field, RootModel


class BrandInfo(BaseModel):
    name: str = Field(
        ...,
        description='Name of the brand',
        examples=['Acme Corporation'],
        max_length=100,
        min_length=1,
    )
    description: Optional[str] = Field(
        None,
        description='Optional description of the brand',
        examples=['Leading provider of innovative solutions'],
        max_length=500,
    )
    user_id: UUID = Field(
        ...,
        description='ID of the user who owns this brand',
        examples=['123e4567-e89b-12d3-a456-426614174000'],
    )


class Tiktok(BaseModel):
    enabled: bool = Field(
        ..., description='whether this social account is enabled', examples=[True]
    )
    username: str = Field(
        ..., description='username for the social account', examples=['@brandaccount']
    )
    access_token: str = Field(..., description='access token', examples=['oauth2_access_token'])
    refresh_token: Optional[str] = Field(
        None, description='refresh token', examples=['oauth2_refresh_token']
    )
    expires_at: Optional[datetime] = Field(
        None, description='token expiration timestamp', examples=['2025-04-10t12:00:00z']
    )


class ContentType(Enum):
    text = 'text'
    video = 'video'
    multi_image = 'multi_image'
    image = 'image'


class TargetPlatform(Enum):
    instagram = 'instagram'
    facebook = 'facebook'
    tiktok = 'tiktok'
    twitter = 'twitter'


class TemplateInfo(BaseModel):
    name: str
    description: Optional[str] = None
    brand_id: str = Field(..., alias='brandId')
    content_type: ContentType = Field(
        ...,
        alias='contentType',
        description='type of content to be generated - text (text-only post), video (video content), multi_image (multiple images), image (single image)',
    )
    target_platforms: list[TargetPlatform] = Field(..., alias='targetPlatforms')


class Variable(BaseModel):
    name: str = Field(..., description='name of the variable')
    values: list[str] = Field(..., description='possible values for the variable')
    description: Optional[str] = Field(None, description='optional description of the variable')


class PromptTemplate(BaseModel):
    system_prompt: str = Field(..., description='system-level instructions for the ai.')
    user_prompt: str = Field(
        ..., description='the main prompt for content generation. uses {{variable}} syntax.'
    )
    temperature: Optional[float] = Field(1, ge=0.0, le=2.0)
    max_tokens: Optional[int] = None
    model: str
    variables: Optional[list[Variable]] = None


class MediaType(Enum):
    image = 'image'
    video = 'video'


class Tag(BaseModel):
    name: Optional[str] = None
    confidence: Optional[float] = None


class Category(BaseModel):
    name: Optional[str] = None
    confidence: Optional[float] = None


class Caption(BaseModel):
    text: Optional[str] = None
    confidence: Optional[float] = None


class Brand1(BaseModel):
    name: Optional[str] = None
    confidence: Optional[float] = None


class Rectangle(BaseModel):
    x: Optional[float] = None
    y: Optional[float] = None
    w: Optional[float] = None
    h: Optional[float] = None


class Person(BaseModel):
    confidence: Optional[float] = None
    rectangle: Optional[Rectangle] = None


class Styles(BaseModel):
    regular: Optional[str] = None
    bold: Optional[str] = None
    italic: Optional[str] = None
    bold_italic: Optional[str] = None


class Font(BaseModel):
    family: Optional[str] = None
    display_name: Optional[str] = None
    styles: Optional[Styles] = None


class Fonts(RootModel[list[Font]]):
    root: list[Font] = Field(
        ..., description='Font definitions for use by both backend and frontend'
    )


class Metadata(BaseModel):
    created_date: datetime = Field(..., description='Creation timestamp')
    updated_date: datetime = Field(..., description='Last update timestamp')
    is_active: bool = Field(..., description='Whether the record is active or soft-deleted')


class DaysOfWeekEnum(Enum):
    monday = 'monday'
    tuesday = 'tuesday'
    wednesday = 'wednesday'
    thursday = 'thursday'
    friday = 'friday'
    saturday = 'saturday'
    sunday = 'sunday'


class SocialAccount(BaseModel):
    enabled: bool = Field(..., description='whether this social account is enabled')
    username: str = Field(..., description='username for the social account')
    access_token: str = Field(..., description='oauth access token')
    refresh_token: Optional[str] = Field(None, description='oauth refresh token')
    expires_at: Optional[datetime] = Field(None, description='token expiration timestamp')


class TimeSlot(BaseModel):
    hour: int = Field(..., description='Hour in 24-hour format', ge=0, le=23)
    minute: int = Field(..., description='Minute', ge=0, le=59)
    timezone: str = Field(..., description="Timezone string (e.g., 'America/New_York')")


class Weight(Enum):
    normal = 'normal'
    bold = 'bold'


class Style(Enum):
    normal = 'normal'
    italic = 'italic'


class Font1(BaseModel):
    family: str = Field(..., description='Font family for the overlay text (e.g., Arial).')
    size: str = Field(..., description='Font size (e.g., "32px").')
    weight: Optional[Weight] = Field(None, description='Font weight for the overlay text.')
    style: Optional[Style] = Field(None, description='Font style for the overlay text.')


class Color(BaseModel):
    text: str = Field(..., description='Color for the overlay text (e.g., "#000000").')
    background: str = Field(
        ..., description='Background color for the overlay area (e.g., "#FFFFFF").'
    )
    box: Optional[str] = Field(
        None, description='Color of the text box background (e.g., "#000000").'
    )
    outline: Optional[str] = Field(None, description='Color for text outline (if supported).')


class Outline(BaseModel):
    color: Optional[str] = Field(None, description='Color for text outline (if supported).')
    width: Optional[int] = Field(
        None, description='Width of the text outline in pixels (if supported).'
    )


class TextAlign(Enum):
    left = 'left'
    center = 'center'
    right = 'right'


class Alignment(BaseModel):
    text_align: Optional[TextAlign] = Field(None, description='Text alignment for overlay text.')


class Box(BaseModel):
    color: Optional[str] = Field(
        None, description='Color of the text box background (e.g., "#000000").'
    )
    alpha: Optional[int] = Field(
        None,
        description='Alpha transparency for the text box background (0=transparent, 255=opaque).',
        ge=0,
        le=255,
    )


class VisualStyle(BaseModel):
    font: Optional[Font1] = None
    color: Optional[Color] = None
    outline: Optional[Outline] = None
    alignment: Optional[Alignment] = None
    box: Optional[Box] = None


class AspectRatio(Enum):
    square = 'square'
    portrait = 'portrait'
    landscape = 'landscape'


class Container(BaseModel):
    width: Optional[int] = Field(None, description='width of the image in pixels')
    height: Optional[int] = Field(None, description='height of the image in pixels')
    aspect_ratio: Optional[AspectRatio] = Field(None, description='aspect ratio for the image')
    padding: Optional[int] = Field(None, description='padding around the content in pixels')


class MinResolution(BaseModel):
    width: Optional[int] = None
    height: Optional[int] = None


class ImageFormat(Enum):
    png = 'png'
    jpeg = 'jpeg'


class Format(BaseModel):
    min_resolution: Optional[MinResolution] = None
    max_file_size: Optional[int] = None
    image_format: Optional[ImageFormat] = None


class Text(BaseModel):
    allowed: Optional[bool] = None
    max_length: Optional[int] = None


class Position(Enum):
    top = 'top'
    center = 'center'
    bottom = 'bottom'


class Overlay(BaseModel):
    text: Optional[Text] = None
    position: Optional[Position] = None


class Image(BaseModel):
    container: Optional[Container] = Field(
        None, description='layout and sizing for the image container'
    )
    background: Optional[str] = Field(None, description='url or local path to a background image')
    format: Optional[Format] = None
    overlay: Optional[Overlay] = None
    filters: Optional[list[str]] = None
    alt_text: Optional[bool] = None
    effects: Optional[list[str]] = None


class Images(BaseModel):
    min: int = Field(..., description='minimum number of images required', ge=2)
    max: int = Field(..., description='maximum number of images allowed', le=10)


class Format1(BaseModel):
    aspect_ratio: Optional[AspectRatio] = Field(
        'square', description='required aspect ratio for all images'
    )
    consistent: Optional[bool] = Field(
        True, description='whether all images must have the same dimensions'
    )
    max_file_size: Optional[int] = Field(None, description='maximum file size per image in bytes')


class Type(Enum):
    slide = 'slide'
    fade = 'fade'
    none = 'none'


class Transitions(BaseModel):
    type: Optional[Type] = Field('slide', description='type of transition between images')
    auto_play: Optional[bool] = Field(False, description='whether to auto-advance through images')


class MultiImage(BaseModel):
    images: Optional[Images] = None
    format: Optional[Format1] = None
    per_image_text: Optional[bool] = Field(
        False, description='whether each image can have its own caption/description'
    )
    transitions: Optional[Transitions] = None


class Type1(Enum):
    image = 'image'
    gif = 'gif'
    video = 'video'


class MediaAttachments(BaseModel):
    allowed: Optional[bool] = Field(
        None, description='whether media attachments are allowed with this text content'
    )
    max_count: Optional[int] = Field(
        None, description='maximum number of media attachments allowed'
    )
    types: Optional[list[Type1]] = Field(None, description='types of media attachments allowed')


class Formatting(BaseModel):
    allow_markdown: Optional[bool] = Field(
        None, description='whether markdown formatting is allowed'
    )
    allow_html: Optional[bool] = Field(None, description='whether html formatting is allowed')
    allow_emoji: Optional[bool] = Field(True, description='whether emoji are allowed in the text')


class Text1(BaseModel):
    max_length: Optional[int] = Field(
        None, description='maximum length of the text content in characters'
    )
    media_attachments: Optional[MediaAttachments] = None
    formatting: Optional[Formatting] = None


class Duration(BaseModel):
    min: Optional[int] = Field(None, description='minimum duration in seconds')
    max: Optional[int] = Field(None, description='maximum duration in seconds')


class AspectRatio2(Enum):
    square = 'square'
    portrait = 'portrait'
    landscape = 'landscape'
    vertical = 'vertical'


class Resolution(BaseModel):
    width: Optional[int] = Field(None, description='video width in pixels')
    height: Optional[int] = Field(None, description='video height in pixels')


class Format2(BaseModel):
    aspect_ratio: Optional[AspectRatio2] = Field('vertical', description='video aspect ratio')
    resolution: Optional[Resolution] = None


class Audio(BaseModel):
    required: Optional[bool] = Field(None, description='whether audio is required')
    background_music: Optional[bool] = Field(
        None, description='whether background music should be included'
    )
    voiceover: Optional[bool] = Field(None, description='whether voiceover should be included')


class Style1(Enum):
    subtitle = 'subtitle'
    overlay = 'overlay'
    none = 'none'


class Captions(BaseModel):
    required: Optional[bool] = Field(None, description='whether captions are required')
    style: Optional[Style1] = Field(None, description='Style of captions to use')


class Video(BaseModel):
    duration: Optional[Duration] = None
    format: Optional[Format2] = None
    audio: Optional[Audio] = None
    captions: Optional[Captions] = None
    visual_effects: Optional[list[str]] = Field(
        None, alias='visualEffects', description='List of allowed visual effects'
    )


class Privacy(Enum):
    public = 'public'
    friends = 'friends'
    custom = 'custom'


class Type2(Enum):
    activity = 'activity'
    feeling = 'feeling'
    celebrating = 'celebrating'
    watching = 'watching'
    eating = 'eating'


class Feeling(BaseModel):
    enabled: Optional[bool] = None
    type: Optional[Type2] = None
    value: Optional[str] = None


class Crosspost(BaseModel):
    instagram: Optional[bool] = None
    groups: Optional[list[str]] = None


class Source(Enum):
    original = 'original'
    music_library = 'music_library'


class Soundtrack(BaseModel):
    enabled: Optional[bool] = None
    source: Optional[Source] = None


class Description(BaseModel):
    text: Optional[str] = None
    language: Optional[str] = None


class Tag1(BaseModel):
    user_id: Optional[str] = Field(None, alias='userId')
    timestamp: Optional[int] = None
    description: Optional[Description] = Field(None, description='Description object for the tag')


class TaggedUsers(BaseModel):
    per_photo: Optional[bool] = Field(
        None, alias='perPhoto', description='Whether to allow different tags per photo'
    )
    users: Optional[list[str]] = None


class Music(BaseModel):
    enabled: Optional[bool] = None
    song_id: Optional[str] = Field(None, alias='songId')


class Filter(Enum):
    normal = 'normal'
    clarendon = 'clarendon'
    gingham = 'gingham'
    moon = 'moon'
    lark = 'lark'
    reyes = 'reyes'


class Location(BaseModel):
    enabled: Optional[bool] = None
    id: Optional[str] = None


class Source1(Enum):
    original = 'original'
    music_library = 'music_library'
    sound_effects = 'sound_effects'


class Audio1(BaseModel):
    source: Optional[Source1] = None
    start_time: Optional[int] = Field(
        None, alias='startTime', description='Start time in seconds for music'
    )


class AspectRatio3(Enum):
    square = 'square'
    portrait = 'portrait'
    landscape = 'landscape'
    mixed = 'mixed'


class Sticker(Enum):
    polls = 'polls'
    questions = 'questions'
    countdown = 'countdown'
    quiz = 'quiz'
    music = 'music'
    location = 'location'
    mention = 'mention'
    hashtag = 'hashtag'


class Highlights(BaseModel):
    enabled: Optional[bool] = None
    folder: Optional[str] = None


class Source2(Enum):
    original = 'original'
    commercial_music = 'commercial_music'
    sounds = 'sounds'


class Music1(BaseModel):
    source: Optional[Source2] = None
    start_time: Optional[int] = Field(None, alias='startTime')
    end_time: Optional[int] = Field(None, alias='endTime')
    volume: Optional[float] = Field(None, ge=0.0, le=1.0)


class Effect(BaseModel):
    id: Optional[str] = None
    start_time: Optional[int] = Field(None, alias='startTime')
    duration: Optional[int] = None


class Layout(Enum):
    left_right = 'left_right'
    top_bottom = 'top_bottom'
    react = 'react'


class Duet(BaseModel):
    enabled: Optional[bool] = None
    layout: Optional[Layout] = None


class Visibility(Enum):
    public = 'public'
    friends = 'friends'
    private = 'private'


class Type3(Enum):
    mention = 'mention'
    hashtag = 'hashtag'
    location = 'location'


class Position1(BaseModel):
    x: Optional[float] = None
    y: Optional[float] = None


class Sticker1(BaseModel):
    type: Optional[Type3] = None
    value: Optional[str] = None
    timestamp: Optional[int] = None
    position: Optional[Position1] = None


class Video1(BaseModel):
    video_url: Optional[str] = Field(None, alias='videoUrl')
    caption: Optional[str] = None
    music: Optional[Music1] = None
    effects: Optional[list[Effect]] = None
    duet: Optional[Duet] = None
    stitch: Optional[bool] = Field(None, description='Allow other users to stitch this video')
    visibility: Optional[Visibility] = 'public'
    comments: Optional[bool] = True
    downloads: Optional[bool] = True
    stickers: Optional[list[Sticker1]] = None


class Music2(BaseModel):
    enabled: Optional[bool] = None
    song_id: Optional[str] = Field(None, alias='songId')


class Style2(Enum):
    default = 'default'
    handwriting = 'handwriting'
    typewriter = 'typewriter'
    neon = 'neon'


class TextItem(BaseModel):
    content: Optional[str] = None
    style: Optional[Style2] = None
    color: Optional[str] = None
    position: Optional[Position1] = None


class Story2(BaseModel):
    media_url: Optional[str] = Field(None, alias='mediaUrl')
    text: Optional[str] = None
    visibility: Optional[Visibility] = 'public'
    music: Optional[Music2] = None
    effects: Optional[list[str]] = None


class TikTok(BaseModel):
    video: Optional[Video1] = Field(None, description='Settings for TikTok videos')
    story: Optional[Story2] = Field(None, description='Settings for TikTok stories')


class NumberFormat(Enum):
    numeric = 'numeric'
    custom = 'custom'


class ThreadSettings(BaseModel):
    is_thread: Optional[bool] = Field(False, alias='isThread')
    number_format: Optional[NumberFormat] = Field('numeric', alias='numberFormat')
    separator: Optional[str] = '/'


class Poll(BaseModel):
    enabled: Optional[bool] = None
    options: Optional[list[str]] = Field(None, max_length=4, min_length=2)
    duration: Optional[int] = Field(None, description='Poll duration in minutes')


class Tweet(BaseModel):
    text: Optional[str] = None
    media: Optional[list[str]] = None
    thread_settings: Optional[ThreadSettings] = Field(None, alias='threadSettings')
    poll: Optional[Poll] = None
    quote_id: Optional[str] = Field(None, alias='quoteId', description='ID of tweet being quoted')
    reply_to: Optional[str] = Field(
        None, alias='replyTo', description='ID of tweet being replied to'
    )


class Thumbnail(BaseModel):
    use_custom: Optional[bool] = Field(None, alias='useCustom')
    time_offset: Optional[int] = Field(
        None, alias='timeOffset', description='Time in seconds for thumbnail frame'
    )


class Visibility2(Enum):
    public = 'public'
    followers = 'followers'


class Coordinates(BaseModel):
    x: Optional[float] = None
    y: Optional[float] = None


class TaggedUser(BaseModel):
    username: Optional[str] = None
    image_index: Optional[int] = Field(None, alias='imageIndex')
    coordinates: Optional[Coordinates] = None


class ImageSet(BaseModel):
    images: Optional[list[str]] = None
    caption: Optional[str] = None
    alt_texts: Optional[list[str]] = Field(
        None, alias='altTexts', description='Alt text for each image'
    )
    tagged_users: Optional[list[TaggedUser]] = Field(None, alias='taggedUsers')


class Space(BaseModel):
    title: Optional[str] = Field(None, max_length=70)
    scheduled_start: Optional[datetime] = Field(None, alias='scheduledStart')
    cohosts: Optional[list[str]] = Field(None, max_length=2)
    recording_enabled: Optional[bool] = Field(True, alias='recordingEnabled')
    language: Optional[str] = None
    topics: Optional[list[str]] = Field(None, max_length=3)


class Field0(BaseModel):
    media_url: Optional[str] = Field(None, alias='mediaUrl')
    text: Optional[str] = None


class Field0Model(BaseModel):
    video_url: Optional[str] = Field(None, alias='videoUrl')
    caption: Optional[str] = None


class Field0Model1(BaseModel):
    images: Optional[list[str]] = None
    caption: Optional[str] = None


class Field0Model2(BaseModel):
    text: Optional[str] = None
    media: Optional[list[str]] = None


class BaseModelModel(BaseModel):
    id: str = Field(..., description='unique identifier for the record')
    metadata: Metadata


class SocialAccounts(BaseModel):
    instagram: Optional[Tiktok] = None
    facebook: Optional[Tiktok] = None
    tiktok: Optional[Tiktok] = None


class Brand(BaseModelModel):
    brand_info: BrandInfo
    social_accounts: Optional[SocialAccounts] = Field(None, alias='socialAccounts')


class VisualStyleModel(BaseModel):
    themes: Optional[list[VisualStyle]] = Field(None, min_length=1)


class Settings(BaseModel):
    prompt_template: PromptTemplate
    visual_style: VisualStyleModel
    image: Image


class Object(BaseModel):
    object: Optional[str] = None
    confidence: Optional[float] = None
    rectangle: Optional[Rectangle] = None


class DenseCaption(BaseModel):
    text: Optional[str] = None
    confidence: Optional[float] = None
    bounding_box: Optional[Rectangle] = None


class MediaMetadata(BaseModel):
    file_name: Optional[str] = None
    description: Optional[str] = None
    suggested_name: Optional[str] = None
    tags: Optional[list[Tag]] = None
    categories: Optional[list[Category]] = None
    objects: Optional[list[Object]] = None
    caption: Optional[Caption] = None
    dense_captions: Optional[list[DenseCaption]] = None
    brands: Optional[list[Brand1]] = None
    people: Optional[list[Person]] = None
    ocr_text: Optional[str] = None
    cognitive_data: Optional[dict[str, Any]] = None


class Schedule(BaseModel):
    days_of_week: list[DaysOfWeekEnum]
    time_slots: list[TimeSlot]


class Post(Field0Model2):
    privacy: Optional[Privacy] = 'public'
    feeling: Optional[Feeling] = None
    tagged_users: Optional[list[str]] = Field(None, alias='taggedUsers')
    crosspost: Optional[Crosspost] = None


class Reel(Field0Model):
    soundtrack: Optional[Soundtrack] = None
    crosspost_to_ig: Optional[bool] = Field(False, alias='crosspostToIG')
    tags: Optional[list[Tag1]] = None


class Carousel(Field0Model1):
    album_name: Optional[str] = Field(None, alias='albumName')
    privacy: Optional[Privacy] = 'public'
    description: Optional[str] = None
    tagged_users: Optional[TaggedUsers] = Field(None, alias='taggedUsers')


class Story(Field0):
    privacy: Optional[Privacy] = 'public'
    music: Optional[Music] = None
    share_to_news: Optional[bool] = Field(
        None, alias='shareToNews', description='Whether to share to News Feed'
    )
    allow_reshares: Optional[bool] = Field(True, alias='allowReshares')


class Facebook(BaseModel):
    post: Optional[Post] = Field(None, description='Settings for Facebook posts')
    reel: Optional[Reel] = Field(None, description='Settings for Facebook reels')
    carousel: Optional[Carousel] = Field(None, description='Settings for Facebook carousel posts')
    story: Optional[Story] = Field(None, description='Settings for Facebook stories')


class Post1(Field0Model2):
    filters: Optional[list[Filter]] = None
    location: Optional[Location] = None
    alt_text: Optional[str] = Field(
        None, alias='altText', description='Image accessibility description'
    )
    first_comment: Optional[bool] = Field(
        None, alias='firstComment', description='Whether to post hashtags as first comment'
    )


class Reel1(Field0Model):
    audio: Optional[Audio1] = None
    collabs: Optional[list[str]] = Field(None, description='Collaborator usernames')
    remixable: Optional[bool] = True
    share_to_feed: Optional[bool] = Field(True, alias='shareToFeed')


class Carousel1(Field0Model1):
    aspect_ratio: Optional[AspectRatio3] = Field('square', alias='aspectRatio')
    filter_consistency: Optional[bool] = Field(
        None, alias='filterConsistency', description='Apply same filter to all slides'
    )
    alt_texts: Optional[list[str]] = Field(
        None, alias='altTexts', description='Image descriptions for each slide'
    )


class Story1(Field0):
    stickers: Optional[list[Sticker]] = None
    links: Optional[bool] = Field(
        None, description='Whether to include swipe-up links (if eligible)'
    )
    highlights: Optional[Highlights] = None


class Instagram(BaseModel):
    post: Optional[Post1] = Field(None, description='Settings for Instagram posts')
    reel: Optional[Reel1] = Field(None, description='Settings for Instagram reels')
    carousel: Optional[Carousel1] = Field(None, description='Settings for Instagram carousels')
    story: Optional[Story1] = Field(None, description='Settings for Instagram stories')


class Video2(Field0Model):
    subtitles: Optional[bool] = Field(None, description='Whether to include subtitles/captions')
    thumbnail: Optional[Thumbnail] = None
    visibility: Optional[Visibility2] = 'public'


class Twitter(BaseModel):
    tweet: Optional[Tweet] = Field(None, description='Settings for regular tweets')
    video: Optional[Video2] = Field(None, description='Settings for Twitter video posts')
    image_set: Optional[ImageSet] = Field(
        None, alias='imageSet', description='Settings for multiple image tweets'
    )
    space: Optional[Space] = Field(None, description='Settings for Twitter Spaces')


class ContentTemplate(BaseModelModel):
    template_info: TemplateInfo = Field(..., alias='templateInfo')
    schedule: Schedule
    settings: Settings


class MediaDocument(BaseModel):
    id: str
    user_id: str
    brand_id: str
    blob_url: str
    media_type: MediaType
    metadata: MediaMetadata
    created_at: datetime
    updated_at: datetime
