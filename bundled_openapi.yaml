openapi: 3.0.3
info:
  title: Generated API
  version: 1.0.0
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: 'https://api.example.com'
    description: Production server
paths:
  paths:
    /brands:
      get:
        summary: List brands by userId
        operationId: listBrandsByUserId
        parameters:
          - name: user_id
            in: query
            required: true
            schema:
              type: string
          - in: query
            name: pagination
            required: false
            schema:
              type: object
              properties:
                limit:
                  type: integer
                  minimum: 1
                  maximum: 100
                  default: 20
                offset:
                  type: integer
                  minimum: 0
                  default: 0
                sort_by:
                  type: string
                  enum:
                    - created_at
                    - updated_at
                    - name
                  default: created_at
                sort_order:
                  type: string
                  enum:
                    - asc
                    - desc
                  default: desc
        responses:
          '200':
            description: List of brands for a user
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/paths/paths/~1brands~1%7Bid%7D/get/responses/200/content/application~1json/schema'
          '400':
            description: Invalid request parameters
            content:
              application/json:
                schema:
                  $ref: '#/components/responses/NotFound/content/application~1json/schema'
                example:
                  code: INVALID_INPUT
                  message: Invalid request parameters
          '401':
            description: Authentication required
            content:
              application/json:
                schema:
                  $ref: '#/components/responses/NotFound/content/application~1json/schema'
                example:
                  code: UNAUTHORIZED
                  message: Valid API key required
          '429':
            description: Rate limit exceeded
            content:
              application/json:
                schema:
                  $ref: '#/components/responses/NotFound/content/application~1json/schema'
                example:
                  code: RATE_LIMIT_EXCEEDED
                  message: Rate limit exceeded
      post:
        summary: Create a new brand
        operationId: createBrand
        requestBody:
          required: true
          content:
            application/json:
              schema:
                BrandCreate:
                  type: object
                  required:
                    - brandInfo
                  properties:
                    brandInfo:
                      $ref: '#/components/schemas/BrandUpdate/properties/brandInfo'
                  description: |
                    Payload for creating a new Brand. Only 'brandInfo' is required.
        responses:
          '201':
            description: Brand created
            content:
              application/json:
                schema:
                  BrandResponse:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                    description: |
                      Minimal response schema for Brand creation or deletion.
          '400':
            $ref: '#/paths/paths/~1brands/get/responses/400'
          '401':
            $ref: '#/paths/paths/~1brands/get/responses/401'
          '429':
            $ref: '#/paths/paths/~1brands/get/responses/429'
    '/brands/{id}':
      get:
        summary: Get a brand by ID
        operationId: getBrandById
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Brand details
            content:
              application/json:
                schema:
                  BrandGet:
                    allOf:
                      - $ref: '#/components/schemas/BrandGet/allOf/0'
                    description: |
                      Response schema for retrieving a Brand by id or user_id.
          '401':
            $ref: '#/paths/paths/~1brands/get/responses/401'
          '404':
            description: Resource not found
            content:
              application/json:
                schema:
                  $ref: '#/components/responses/NotFound/content/application~1json/schema'
                example:
                  code: RESOURCE_NOT_FOUND
                  message: The requested resource was not found
          '429':
            $ref: '#/paths/paths/~1brands/get/responses/429'
      patch:
        summary: Update a brand by ID
        operationId: updateBrandById
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                BrandUpdate:
                  type: object
                  properties:
                    brandInfo:
                      $ref: '#/components/schemas/BrandUpdate/properties/brandInfo'
                    socialAccounts:
                      type: array
                      items:
                        $ref: '#/components/schemas/BrandUpdate/properties/socialAccounts/items'
                  description: |
                    Payload for updating a Brand. All fields are optional and may be provided for partial update.
        responses:
          '200':
            description: Brand updated
            content:
              application/json:
                schema:
                  $ref: '#/paths/paths/~1brands/post/responses/201/content/application~1json/schema'
          '400':
            $ref: '#/paths/paths/~1brands/get/responses/400'
          '401':
            $ref: '#/paths/paths/~1brands/get/responses/401'
          '404':
            $ref: '#/paths/paths/~1brands~1%7Bid%7D/get/responses/404'
          '429':
            $ref: '#/paths/paths/~1brands/get/responses/429'
      delete:
        summary: Delete a brand by ID
        operationId: deleteBrandById
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          '204':
            description: Brand deleted
          '401':
            $ref: '#/paths/paths/~1brands/get/responses/401'
          '404':
            $ref: '#/paths/paths/~1brands~1%7Bid%7D/get/responses/404'
          '429':
            $ref: '#/paths/paths/~1brands/get/responses/429'
components:
  parameters:
    pagination:
      in: query
      name: pagination
      required: false
      schema:
        type: object
        properties:
          limit:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          offset:
            type: integer
            minimum: 0
            default: 0
          sort_by:
            type: string
            enum:
              - created_at
              - updated_at
              - name
            default: created_at
          sort_order:
            type: string
            enum:
              - asc
              - desc
            default: desc
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: resource identifier (uuid)
    filter:
      name: filter
      in: query
      required: false
      schema:
        type: string
      description: 'filter criteria in the format field:operator:value (e.g., name:contains:test)'
      example: 'name:contains:acme'
    brand_id:
      name: brand_id
      in: query
      required: true
      schema:
        type: string
        format: uuid
      description: brand identifier (uuid)
  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/responses/NotFound/content/application~1json/schema'
          example:
            code: UNAUTHORIZED
            message: Valid API key required
    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/responses/NotFound/content/application~1json/schema'
          example:
            code: RATE_LIMIT_EXCEEDED
            message: Rate limit exceeded
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: Error code identifier
              message:
                type: string
                description: Human-readable error message
              details:
                type: string
                description: Optional additional error details
                nullable: true
            required:
              - code
              - message
            description: Standard error response object
          example:
            code: RESOURCE_NOT_FOUND
            message: The requested resource was not found
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/responses/NotFound/content/application~1json/schema'
          example:
            code: INVALID_INPUT
            message: Invalid request parameters
  schemas:
    PostDocument:
      type: object
      description: Stub for PostDocument schema
    MediaDocument:
      allOf:
        - type: object
          required:
            - id
            - metadata
          properties:
            id:
              type: string
              description: unique identifier for the record
            metadata:
              $ref: '#/components/schemas/BaseModel/properties/metadata'
        - type: object
          properties:
            brandId:
              type: string
            blobUrl:
              type: string
            mediaType:
              type: string
              enum:
                - image
                - video
            mediaMetadata:
              type: object
              required:
                - fileName
                - tags
                - cognitiveData
              properties:
                fileName:
                  type: string
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                suggestedName:
                  type: string
                cognitiveData:
                  $ref: '#/components/schemas/MediaMetadata/properties/cognitiveData'
    ContentGenerationTemplateDocument:
      allOf:
        - $ref: '#/components/schemas/MediaDocument/allOf/0'
        - type: object
          properties:
            brandId:
              type: string
            templateInfo:
              $ref: '#/components/schemas/ContentGenerationTemplateUpdate/properties/templateInfo'
            schedule:
              $ref: '#/components/schemas/ContentGenerationTemplateUpdate/properties/schedule'
            settings:
              $ref: '#/components/schemas/ContentGenerationTemplateUpdate/properties/settings'
    BrandDocument:
      allOf:
        - $ref: '#/components/schemas/MediaDocument/allOf/0'
        - type: object
          properties:
            user_id:
              type: string
            brand_info:
              $ref: '#/components/schemas/BrandUpdate/properties/brandInfo'
            socialAccounts:
              type: array
              items:
                $ref: '#/components/schemas/BrandUpdate/properties/socialAccounts/items'
    TemplateSettings:
      type: object
      properties:
        prompt_template:
          type: object
          properties:
            system_prompt:
              type: string
            user_prompt:
              type: string
            temperature:
              type: number
            max_tokens:
              type: integer
            model:
              type: string
            variables:
              type: array
              items:
                $ref: '#/components/schemas/PromptTemplate/properties/variables/items'
        visual_style:
          type: object
          properties:
            themes:
              type: array
              items:
                $ref: '#/components/schemas/Video/properties/visualStyle'
        contentItem:
          type: object
          properties:
            text:
              $ref: '#/components/schemas/ContentItem/properties/text'
            image:
              $ref: '#/components/schemas/ContentItem/properties/image'
            video:
              $ref: '#/components/schemas/ContentItem/properties/video'
            multiImage:
              $ref: '#/components/schemas/ContentItem/properties/multiImage'
    TemplateInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        contentType:
          type: string
          enum:
            - text
            - video
            - multi_image
            - image
        socialAccounts:
          type: array
          items:
            $ref: '#/components/schemas/SocialAccountEntry/properties/platform'
    PromptVariable:
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            type: string
        description:
          type: string
    PromptTemplate:
      type: object
      properties:
        system_prompt:
          type: string
        user_prompt:
          type: string
        temperature:
          type: number
        max_tokens:
          type: integer
        model:
          type: string
        variables:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              values:
                type: array
                items:
                  type: string
              description:
                type: string
    VisualStyleObj:
      type: object
      properties:
        themes:
          type: array
          items:
            $ref: '#/components/schemas/Video/properties/visualStyle'
    VisualStyle:
      type: object
      properties:
        font:
          type: object
          required:
            - family
            - size
          properties:
            family:
              type: string
              description: 'Font family for the overlay text (e.g., Arial).'
            size:
              type: string
              description: 'Font size (e.g., "32px").'
            weight:
              type: string
              enum:
                - normal
                - bold
              description: Font weight for the overlay text.
            style:
              type: string
              enum:
                - normal
                - italic
              description: Font style for the overlay text.
        color:
          type: object
          required:
            - text
            - background
          properties:
            text:
              type: string
              description: 'Color for the overlay text (e.g., "#000000").'
            background:
              type: string
              description: 'Background color for the overlay area (e.g., "#FFFFFF").'
            box:
              type: string
              description: 'Color of the text box background (e.g., "#000000").'
            outline:
              type: string
              description: Color for text outline (if supported).
        outline:
          type: object
          properties:
            color:
              type: string
              description: Color for text outline (if supported).
            width:
              type: integer
    TextStyle:
      type: object
      properties:
        font:
          type: object
          properties:
            family:
              type: string
            size:
              type: string
            weight:
              type: string
            style:
              type: string
        font_color:
          type: string
        outline:
          type: object
          properties:
            color:
              type: string
            width:
              type: integer
        alignment:
          type: object
          properties:
            text_align:
              type: string
    OverlayBox:
      type: object
      properties:
        color:
          type: string
        transparency:
          type: number
        vertical_location:
          type: string
        horizontal_location:
          type: string
    Outline:
      type: object
      properties:
        color:
          type: string
        width:
          type: integer
    Fonts:
      type: array
      description: Font definitions for use by both backend and frontend
      items:
        type: object
        properties:
          family:
            type: string
          display_name:
            type: string
          styles:
            type: object
            properties:
              regular:
                type: string
              bold:
                type: string
              italic:
                type: string
              bold_italic:
                type: string
    Font:
      type: object
      properties:
        family:
          type: string
        size:
          type: string
        weight:
          type: string
        style:
          type: string
    Alignment:
      type: object
      properties:
        text_align:
          type: string
    SocialAccountEntry:
      type: object
      properties:
        platform:
          type: string
          enum:
            - instagram
            - facebook
            - twitter
            - tiktok
        account:
          type: object
          required:
            - id
            - username
            - accessToken
            - profileUrl
            - expiry_date
          properties:
            id:
              type: string
              description: Unique identifier for the social account
            username:
              type: string
              description: Username for the social account
            accessToken:
              type: string
              description: OAuth access token
            profileUrl:
              type: string
              description: URL to the user's profile
            expiry_date:
              type: string
              format: date-time
              description: Token expiration timestamp
    SocialAccount:
      type: object
      required:
        - id
        - username
        - accessToken
        - profileUrl
        - expiry_date
      properties:
        id:
          type: string
          description: Unique identifier for the social account
        username:
          type: string
          description: Username for the social account
        accessToken:
          type: string
          description: OAuth access token
        profileUrl:
          type: string
          description: URL to the user's profile
        expiry_date:
          type: string
          format: date-time
          description: Token expiration timestamp
    Platform:
      type: string
      enum:
        - instagram
        - facebook
        - twitter
        - tiktok
    TimeSlot:
      type: object
      required:
        - hour
        - minute
        - timezone
      properties:
        hour:
          type: integer
          minimum: 0
          maximum: 23
          description: Hour in 24-hour format
        minute:
          type: integer
          minimum: 0
          maximum: 59
          description: Minute
        timezone:
          type: string
          description: 'Timezone string (e.g., ''America/New_York'')'
    Schedule:
      type: object
      required:
        - days_of_week
        - time_slots
      properties:
        days_of_week:
          type: array
          items:
            type: string
            enum:
              - monday
              - tuesday
              - wednesday
              - thursday
              - friday
              - saturday
              - sunday
        time_slots:
          type: array
          items:
            type: object
            required:
              - hour
              - minute
              - timezone
            properties:
              hour:
                type: integer
                minimum: 0
                maximum: 23
                description: Hour in 24-hour format
              minute:
                type: integer
                minimum: 0
                maximum: 59
                description: Minute
              timezone:
                type: string
                description: 'Timezone string (e.g., ''America/New_York'')'
    Video:
      type: object
      properties:
        media_type:
          type: string
          enum:
            - Color
            - Set
            - Uploaded
            - Online
        set_url:
          type: string
        visualStyle:
          type: object
          properties:
            font:
              type: object
              required:
                - family
                - size
              properties:
                family:
                  type: string
                  description: 'Font family for the overlay text (e.g., Arial).'
                size:
                  type: string
                  description: 'Font size (e.g., "32px").'
                weight:
                  type: string
                  enum:
                    - normal
                    - bold
                  description: Font weight for the overlay text.
                style:
                  type: string
                  enum:
                    - normal
                    - italic
                  description: Font style for the overlay text.
            color:
              type: object
              required:
                - text
                - background
              properties:
                text:
                  type: string
                  description: 'Color for the overlay text (e.g., "#000000").'
                background:
                  type: string
                  description: 'Background color for the overlay area (e.g., "#FFFFFF").'
                box:
                  type: string
                  description: 'Color of the text box background (e.g., "#000000").'
                outline:
                  type: string
                  description: Color for text outline (if supported).
            outline:
              type: object
              properties:
                color:
                  type: string
                  description: Color for text outline (if supported).
                width:
                  type: integer
    MultiImage:
      type: object
      properties:
        images:
          type: array
          items:
            $ref: '#/components/schemas/ContentItem/properties/image'
        min_images:
          type: integer
        max_images:
          type: integer
    MediaType:
      type: string
      enum:
        - Color
        - Set
        - Uploaded
        - Online
    MediaMetadata:
      type: object
      required:
        - fileName
        - tags
        - cognitiveData
      properties:
        fileName:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        suggestedName:
          type: string
        cognitiveData:
          type: object
          properties:
            tags:
              type: array
              items:
                $ref: '#/components/schemas/CognitiveData/properties/tags/items'
            categories:
              type: array
              items:
                $ref: '#/components/schemas/CognitiveData/properties/categories/items'
            objects:
              type: array
              items:
                $ref: '#/components/schemas/CognitiveData/properties/objects/items'
            caption:
              $ref: '#/components/schemas/CognitiveData/properties/caption'
            denseCaptions:
              type: array
              items:
                $ref: '#/components/schemas/CognitiveData/properties/denseCaptions/items'
            brands:
              type: array
              items:
                $ref: '#/components/schemas/CognitiveData/properties/brands/items'
            people:
              type: array
              items:
                $ref: '#/components/schemas/CognitiveData/properties/people/items'
            ocrText:
              type: string
    Image:
      type: object
      properties:
        media_type:
          $ref: '#/components/schemas/Video/properties/media_type'
        set_url:
          type: string
        visualStyle:
          $ref: '#/components/schemas/Video/properties/visualStyle'
    Rectangle:
      type: object
      required:
        - x
        - 'y'
        - w
        - h
      properties:
        x:
          type: number
        'y':
          type: number
        w:
          type: number
        h:
          type: number
    CognitiveTag:
      type: object
      required:
        - name
        - confidence
      properties:
        name:
          type: string
        confidence:
          type: number
    CognitivePerson:
      type: object
      required:
        - confidence
        - rectangle
      properties:
        confidence:
          type: number
        rectangle:
          type: object
          required:
            - x
            - 'y'
            - w
            - h
          properties:
            x:
              type: number
            'y':
              type: number
            w:
              type: number
            h:
              type: number
    CognitiveObject:
      type: object
      required:
        - object
        - confidence
        - rectangle
      properties:
        object:
          type: string
        confidence:
          type: number
        rectangle:
          $ref: '#/components/schemas/CognitivePerson/properties/rectangle'
    CognitiveDenseCaption:
      type: object
      required:
        - text
        - confidence
        - boundingBox
      properties:
        text:
          type: string
        confidence:
          type: number
        boundingBox:
          $ref: '#/components/schemas/CognitivePerson/properties/rectangle'
    CognitiveData:
      type: object
      properties:
        tags:
          type: array
          items:
            type: object
            required:
              - name
              - confidence
            properties:
              name:
                type: string
              confidence:
                type: number
        categories:
          type: array
          items:
            type: object
            required:
              - name
              - confidence
            properties:
              name:
                type: string
              confidence:
                type: number
        objects:
          type: array
          items:
            type: object
            required:
              - object
              - confidence
              - rectangle
            properties:
              object:
                type: string
              confidence:
                type: number
              rectangle:
                $ref: '#/components/schemas/CognitivePerson/properties/rectangle'
        caption:
          type: object
          required:
            - text
            - confidence
          properties:
            text:
              type: string
            confidence:
              type: number
        denseCaptions:
          type: array
          items:
            type: object
            required:
              - text
              - confidence
              - boundingBox
            properties:
              text:
                type: string
              confidence:
                type: number
              boundingBox:
                $ref: '#/components/schemas/CognitivePerson/properties/rectangle'
        brands:
          type: array
          items:
            type: object
            required:
              - name
              - confidence
            properties:
              name:
                type: string
              confidence:
                type: number
        people:
          type: array
          items:
            type: object
            required:
              - confidence
              - rectangle
            properties:
              confidence:
                type: number
              rectangle:
                $ref: '#/components/schemas/CognitivePerson/properties/rectangle'
        ocrText:
          type: string
    CognitiveCategory:
      type: object
      required:
        - name
        - confidence
      properties:
        name:
          type: string
        confidence:
          type: number
    CognitiveCaption:
      type: object
      required:
        - text
        - confidence
      properties:
        text:
          type: string
        confidence:
          type: number
    CognitiveBrand:
      type: object
      required:
        - name
        - confidence
      properties:
        name:
          type: string
        confidence:
          type: number
    Text:
      type: object
      properties:
        value:
          type: string
    Metadata:
      type: object
      required:
        - created_date
        - updated_date
        - is_active
      properties:
        created_date:
          type: string
          format: date-time
          description: Creation timestamp
        updated_date:
          type: string
          format: date-time
          description: Last update timestamp
        is_active:
          type: boolean
          description: Whether the record is active or soft-deleted
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code identifier
        message:
          type: string
          description: Human-readable error message
        details:
          type: string
          description: Optional additional error details
          nullable: true
      required:
        - code
        - message
      description: Standard error response object
    ContentType:
      type: string
      enum:
        - text
        - video
        - multi_image
        - image
    ContentItem:
      type: object
      properties:
        text:
          type: object
          properties:
            value:
              type: string
        image:
          type: object
          properties:
            media_type:
              $ref: '#/components/schemas/Video/properties/media_type'
            set_url:
              type: string
            visualStyle:
              $ref: '#/components/schemas/Video/properties/visualStyle'
        video:
          type: object
          properties:
            media_type:
              $ref: '#/components/schemas/Video/properties/media_type'
            set_url:
              type: string
            visualStyle:
              $ref: '#/components/schemas/Video/properties/visualStyle'
        multiImage:
          type: object
          properties:
            images:
              type: array
              items:
                $ref: '#/components/schemas/ContentItem/properties/image'
            min_images:
              type: integer
            max_images:
              type: integer
    BrandInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    BaseModel:
      type: object
      required:
        - id
        - metadata
      properties:
        id:
          type: string
          description: unique identifier for the record
        metadata:
          type: object
          required:
            - created_date
            - updated_date
            - is_active
          properties:
            created_date:
              type: string
              format: date-time
              description: Creation timestamp
            updated_date:
              type: string
              format: date-time
              description: Last update timestamp
            is_active:
              type: boolean
              description: Whether the record is active or soft-deleted
    ContentGenerationTemplateUpdate:
      type: object
      properties:
        brandId:
          type: string
        templateInfo:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            contentType:
              $ref: '#/components/schemas/TemplateInfo/properties/contentType'
            socialAccounts:
              type: array
              items:
                $ref: '#/components/schemas/SocialAccountEntry/properties/platform'
        schedule:
          type: object
          required:
            - days_of_week
            - time_slots
          properties:
            days_of_week:
              type: array
              items:
                type: string
                enum:
                  - monday
                  - tuesday
                  - wednesday
                  - thursday
                  - friday
                  - saturday
                  - sunday
            time_slots:
              type: array
              items:
                $ref: '#/components/schemas/Schedule/properties/time_slots/items'
        settings:
          type: object
          properties:
            prompt_template:
              $ref: '#/components/schemas/TemplateSettings/properties/prompt_template'
            visual_style:
              $ref: '#/components/schemas/TemplateSettings/properties/visual_style'
            contentItem:
              $ref: '#/components/schemas/TemplateSettings/properties/contentItem'
        deleted:
          type: boolean
      description: |
        Payload for updating a ContentGenerationTemplateDocument. All fields are optional and may be provided for partial update.
    ContentGenerationTemplateResponse:
      type: object
      properties:
        id:
          type: string
        brandId:
          type: string
      description: |
        Minimal response schema for ContentGenerationTemplateDocument creation or deletion.
    ContentGenerationTemplateGet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/MediaDocument/allOf/0'
            - type: object
              properties:
                brandId:
                  type: string
                templateInfo:
                  $ref: '#/components/schemas/ContentGenerationTemplateUpdate/properties/templateInfo'
                schedule:
                  $ref: '#/components/schemas/ContentGenerationTemplateUpdate/properties/schedule'
                settings:
                  $ref: '#/components/schemas/ContentGenerationTemplateUpdate/properties/settings'
      description: |
        Response schema for retrieving a ContentGenerationTemplateDocument by id or brandId.
    ContentGenerationTemplateDelete:
      type: object
      required:
        - id
      properties:
        id:
          type: string
      description: |
        Payload for deleting a ContentGenerationTemplateDocument by id.
    ContentGenerationTemplateCreate:
      type: object
      required:
        - brandId
        - templateInfo
      properties:
        brandId:
          type: string
        templateInfo:
          $ref: '#/components/schemas/ContentGenerationTemplateUpdate/properties/templateInfo'
        schedule:
          $ref: '#/components/schemas/ContentGenerationTemplateUpdate/properties/schedule'
        settings:
          $ref: '#/components/schemas/ContentGenerationTemplateUpdate/properties/settings'
      description: |
        Payload for creating a new ContentGenerationTemplateDocument. 'brandId' and 'templateInfo' are required.
    BrandUpdate:
      type: object
      properties:
        brandInfo:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
        socialAccounts:
          type: array
          items:
            type: object
            properties:
              platform:
                $ref: '#/components/schemas/SocialAccountEntry/properties/platform'
              account:
                $ref: '#/components/schemas/SocialAccountEntry/properties/account'
      description: |
        Payload for updating a Brand. All fields are optional and may be provided for partial update.
    BrandResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      description: |
        Minimal response schema for Brand creation or deletion.
    BrandGet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/MediaDocument/allOf/0'
            - type: object
              properties:
                user_id:
                  type: string
                brand_info:
                  $ref: '#/components/schemas/BrandUpdate/properties/brandInfo'
                socialAccounts:
                  type: array
                  items:
                    $ref: '#/components/schemas/BrandUpdate/properties/socialAccounts/items'
      description: |
        Response schema for retrieving a Brand by id or user_id.
    BrandDelete:
      type: object
      required:
        - id
      properties:
        id:
          type: string
      description: |
        Payload for deleting a Brand by id.
    BrandCreate:
      type: object
      required:
        - brandInfo
      properties:
        brandInfo:
          $ref: '#/components/schemas/BrandUpdate/properties/brandInfo'
      description: |
        Payload for creating a new Brand. Only 'brandInfo' is required.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      description: api key authentication for all endpoints
      name: x-api-key
      in: header
      x-example: your-api-key-here
